# Алгоритм:
# 1. Выбор опорного элемента из массива.
# 2. Перераспределение элементов в массиве таким образом, что элементы меньше опорного помещаются перед ним,
# а больше или равные — после.
# 3. Рекурсивное применение первых двух шагов к двум подмассивам слева и справа от опорного элемента.
# Рекурсия не применяется к массиву, в котором только один или отсутствуют элементы.

def partition(nums, low, high):
    # Выбираем средний элемент в качестве опорного
    # Также возможен выбор первого, последнего
    # или произвольного элементов в качестве опорного
    pivot = nums[(low + high) // 2]
    i = low - 1
    j = high + 1
    while True:
        i += 1
        while nums[i] < pivot:
            i += 1

        j -= 1
        while nums[j] > pivot:
            j -= 1

        if i >= j:
            return j

        # Если элемент с индексом i (слева от опорного) больше, чем
        # элемент с индексом j (справа от опорного), меняем их местами
        nums[i], nums[j] = nums[j], nums[i]


def quick_sort(nums):
    # Создадим вспомогательную функцию, которая вызывается рекурсивно
    def _quick_sort(items, low, high):
        if low < high:
            # Индекс опорного элемента
            split_index = partition(items, low, high)
            _quick_sort(items, low, split_index)
            _quick_sort(items, split_index + 1, high)

    _quick_sort(nums, 0, len(nums) - 1)


# Проверяем, что оно работает
nums = [22, 5, 1, 18, 99, 32, 12, 18, 5]
print("before sort = ", nums)
quick_sort(nums)
print("after sort = ", nums)
